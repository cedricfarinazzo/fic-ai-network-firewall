import requests
import json
import os
from tqdm import tqdm
import pyzipper
import multiprocessing
from multiprocessing import cpu_count
import threading
import numpy as np

CPU_COUNT = cpu_count()
NB_THREAD = CPU_COUNT * 1
ZIP_PASSWORD = b'infected'
HEADERS = { 'API-KEY': '' }

TAGS = [
        "32", "64",
        "elf", "exe", "msi", "dll", "apk",
        "intel", "arm",
        "xls", "xlsx", "xlsm",
        "doc", "docx", "docm",
        "zip", "rar", "7z",
        "pdf", "js", "vbs"
]


def download_hash(h):
    data = {
        'query': 'get_file',
        'sha256_hash': h,
    }
    response = requests.post('https://mb-api.abuse.ch/api/v1/', data=data, timeout=15, headers=HEADERS, allow_redirects=True)

    if 'file_not_found' in response.text:
        print(f"{h}: file not found")
    else:
        open("/tmp/" + h + '.zip', 'wb+').write(response.content)
        try:
            with pyzipper.AESZipFile("/tmp/" + h +".zip") as zf:
                zf.pwd = ZIP_PASSWORD
                zf.extractall("dataset/")
        except:
            print(f"{h}: failed to unzip")
        os.remove("/tmp/" + h + '.zip')


def runner(chunk, pbar):
    local_pbar = tqdm(total=len(chunk))
    for h in chunk:
        local_pbar.set_description(h)
        download_hash(h)
        pbar.update(1)
        local_pbar.update(1)


def main():
    sha256_hash_list = []
    total_size = 0
    for tag in TAGS:
        data = {'query': 'get_taginfo', 'tag': tag, 'limit': 1000}
        response = requests.post('https://mb-api.abuse.ch/api/v1/', data=data, headers=HEADERS, timeout=15)
        json_response = response.content.decode("utf-8", "ignore")
        json_response = json.loads(json_response)

        if json_response["query_status"] == 'no_results' or not json_response["data"]:
            continue

        found = 0
        for e in json_response["data"]:
            if e["sha256_hash"] not in sha256_hash_list:
                sha256_hash_list.append(e["sha256_hash"])
                total_size += e["file_size"]
                found += 1

        print(f"{tag}: Found {found} malwares")

    print("total: ", len(sha256_hash_list))
    print("file size: ", total_size)

    pbar = tqdm(total=len(sha256_hash_list))

    chunks = np.array_split(sha256_hash_list, NB_THREAD)
    threads = [None for _ in range(NB_THREAD)]

    for i in range(NB_THREAD):
        threads[i] = threading.Thread(target=runner, args=(chunks[i], pbar))

    for i in range(NB_THREAD):
        threads[i].start()

    for i in range(NB_THREAD):
        threads[i].join()

    pbar.close()

if __name__ == '__main__':
    main()
